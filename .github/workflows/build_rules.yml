name: 'Build distributable binary rules file from downloaded raw text files'

on:
  workflow_dispatch:

jobs:
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Setting-up GitHub username
        run: |
          git config --global user.email "github@actions"
          git config --global user.name "Repository manager"
      
      - name: Installing crx3-utils
        run: npm -i crx3-utils@0.0.3
        
      - name: Generate concatenated rules file
        run: find ./downloaded_rules -type f -exec cat {} + > ./concatenated_rules.txt

      - name: Emptying output folder
        run: git rm -rf ./output/

      - name: Creating output folder
        run: mkdir -p ./output/

      - name: Adding executable permission to generation tools
        run: chmod +x ./tools/ruleset_converter

      - name: Generating binary rules file
        run: ./tools/ruleset_converter --input_format=filter-list --output_format=unindexed-ruleset --input_files=./concatenated_rules.txt --output_file="./output/Filtering Rules"
      
      - name: Generating LICENSE file
        run: cat licenses/* > output/LICENSE
      
      - name: Generating component file
        env:
          # To generate a test key, use:
          # openssl genpkey -algorithm RSA -pkeyopt rsa_keygen_bits:2048 -out private.pem
          PRIVATE_KEY: ${{ secrets.PRIVATE_KEY_SIGNATURE }}
        run: |
          version=$(date +'%y.%j')
          filename="${version}_subresource_rules.crx3"
          zip_filename="${version}_subresource_rules.zip"
          cat <<EOF > output/manifest.json
          {
            "manifest_version": 2,
            "name": "Subresource Filtering Rules",
            "ruleset_format": 1,
            "baserelease": "$version",
            "version": "$version"
          }
          EOF
          # Always generate the .zip file with the same metadata
          find output/ -exec touch -t 197001010000.00 {} \;
          zip -rj "output/${zip_filename}" output/*
          echo "$PRIVATE_KEY" > /tmp/private.pem
          crx3-new /tmp/private.pem < ${zip_filename} > ${filename}
          rm -f /tmp/private.pem
          if [ -f /tmp/private.pem ]; then
            echo "Error: Failed to delete private.pem"
            exit -1
          fi
          filesize=$(stat -c%s "output/${filename}")
          sha256=$(shasum -a 256 "output/${filename}" | cut -f1 -d' ')
          sha1=$(python3 tools/generate_sha1_base64_signature.py "output/${filename}")
          echo "  if (version_to_use == '${version}') {" > output/worker_configuration.js
          echo "    sha256 = '${sha256}';" >> output/worker_configuration.js
          echo "    sha1 = '${sha1}';" >> output/worker_configuration.js
          echo "    filesize = '${filesize}';" >> output/worker_configuration.js
          echo "    filename = '${filename}';" >> output/worker_configuration.js
          echo "  }" >> output/worker_configuration.js
          echo $sha1 > output/${filename}.sha1.base64.sig
          echo $sha256 > output/${filename}.sha256.sig
          echo $filesize > output/${filename}.filesize
          cd output && ln -s "${filename}" "latest.crx3" && cd ..
          echo "  // Configuration for the update server"
          cat output/worker_configuration.js

      - name: Pushing generated binary rules file
        run: |
          rm ./concatenated_rules.txt
          git add ./output
          git commit -a -m 'Update binary rules file'
          git push

      - name: Deploying files to distribution server
        run: |
          response=$(curl -s "https://${{ secrets.DEPLOY_HOST }}/${{ secrets.DEPLOY_PATH }}/${{ secrets.DEPLOY_SCRIPT_NAME }}?key=${{ secrets.DEPLOY_KEY }}")
          echo "$response"
